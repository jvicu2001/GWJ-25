[gd_scene load_steps=8 format=2]

[ext_resource path="res://addons/zylann.hterrain/hterrain.gd" type="Script" id=1]
[ext_resource path="res://Assets/Scenes/Test RandomMap/HeightData/data.hterrain" type="Resource" id=2]
[ext_resource path="res://Assets/Scenes/Test RandomMap/GenTerrain.gd" type="Script" id=3]

[sub_resource type="Shader" id=1]
code = "shader_type spatial;

// This is a very simple shader for a low-poly coloured visual, without textures

uniform sampler2D u_terrain_heightmap;
uniform sampler2D u_terrain_normalmap;
uniform sampler2D u_terrain_colormap : hint_albedo;
uniform mat4 u_terrain_inverse_transform;
uniform mat3 u_terrain_normal_basis;

uniform sampler2D height_colors;
uniform float height_range;
uniform float base_height;

varying flat vec4 v_tint;


vec3 unpack_normal(vec4 rgba) {
	return rgba.xzy * 2.0 - vec3(1.0);
}

vec4 height_to_color(float height) {
	vec2 adjusted_height = vec2((height-base_height)/height_range, 0.0);
	vec4 h_color = texture(height_colors, adjusted_height);
	return h_color;
}

void vertex() {
	vec2 cell_coords = (u_terrain_inverse_transform * WORLD_MATRIX * vec4(VERTEX, 1)).xz;
	// Must add a half-offset so that we sample the center of pixels,
	// otherwise bilinear filtering of the textures will give us mixed results (#183)
	cell_coords += vec2(0.5);

	// Normalized UV
	UV = cell_coords / vec2(textureSize(u_terrain_heightmap, 0));
	
	// Height displacement
	float h = texture(u_terrain_heightmap, UV).r;
	VERTEX.y = h;
	
	// Putting this in vertex saves 2 fetches from the fragment shader,
	// which is good for performance at a negligible quality cost,
	// provided that geometry is a regular grid that decimates with LOD.
	// (downside is LOD will also decimate tint and splat, but it's not bad overall)
	
	//v_tint = texture(u_terrain_colormap, UV);
	v_tint = height_to_color(h);
	
	// Need to use u_terrain_normal_basis to handle scaling.
	// For some reason I also had to invert Z when sampling terrain normals... not sure why
	NORMAL = u_terrain_normal_basis * (unpack_normal(texture(u_terrain_normalmap, UV)) * vec3(1,1,-1));
}

void fragment() {
	if (v_tint.a < 0.5) {
		// TODO Add option to use vertex discarding instead, using NaNs
		discard;
	}
	
	vec3 terrain_normal_world = u_terrain_normal_basis * (unpack_normal(texture(u_terrain_normalmap, UV)) * vec3(1,1,-1));
	terrain_normal_world = normalize(terrain_normal_world);
	
	ALBEDO = v_tint.rgb;
	ROUGHNESS = 1.0;
	NORMAL = normalize(cross(dFdx(VERTEX), dFdy(VERTEX)));
}

"

[sub_resource type="Gradient" id=2]
offsets = PoolRealArray( 0.366492, 0.387435, 0.628272, 0.65096, 0.910995, 0.931937 )
colors = PoolColorArray( 0.882353, 0.807843, 0.0313726, 1, 0.215686, 0.819608, 0.164706, 1, 0.25501, 0.812133, 0.20663, 1, 0.690196, 0.729412, 0.670588, 1, 0.876059, 0.891748, 0.868215, 1, 0.815686, 0.956863, 0.996078, 1 )

[sub_resource type="GradientTexture" id=3]
gradient = SubResource( 2 )

[sub_resource type="PlaneMesh" id=4]
size = Vector2( 1024, 1024 )

[node name="Spatial" type="Spatial"]
script = ExtResource( 3 )

[node name="HTerrain" type="Spatial" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, -512, 0, -512 )
script = ExtResource( 1 )
_terrain_data = ExtResource( 2 )
chunk_size = 32
shader_type = "Custom"
custom_shader = SubResource( 1 )
shader_params/height_range = 150
shader_params/base_height = -50
shader_params/height_colors = SubResource( 3 )
ground/albedo_bump_0 = null
ground/normal_roughness_0 = null
ground/albedo_bump_1 = null
ground/normal_roughness_1 = null
ground/albedo_bump_2 = null
ground/normal_roughness_2 = null
ground/albedo_bump_3 = null
ground/normal_roughness_3 = null

[node name="Camera" type="Camera" parent="."]
transform = Transform( -0.707107, 0.183013, -0.683013, 0, 0.965926, 0.258819, 0.707107, 0.183013, -0.683013, -513, 160, -513 )
far = 2000.0

[node name="DirectionalLight" type="DirectionalLight" parent="."]
transform = Transform( 1, 0, 0, 0, 0.980029, 0.198855, 0, -0.198855, 0.980029, 0, 75.1859, 0 )
directional_shadow_mode = 1
directional_shadow_depth_range = 1

[node name="MeshInstance" type="MeshInstance" parent="."]
mesh = SubResource( 4 )
material/0 = null
